/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RouletteContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betAmount"
      | "betColor"
      | "fundContract"
      | "owner"
      | "spinWheel"
      | "winner"
      | "winningColor"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SpinResult"): EventFragment;

  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "betColor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spinWheel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winningColor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spinWheel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace SpinResultEvent {
  export type InputTuple = [
    player: AddressLike,
    won: boolean,
    payout: BigNumberish,
    contractBalance: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    won: boolean,
    payout: bigint,
    contractBalance: bigint
  ];
  export interface OutputObject {
    player: string;
    won: boolean;
    payout: bigint;
    contractBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RouletteContract extends BaseContract {
  connect(runner?: ContractRunner | null): RouletteContract;
  waitForDeployment(): Promise<this>;

  interface: RouletteContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betAmount: TypedContractMethod<[], [bigint], "view">;

  betColor: TypedContractMethod<[], [bigint], "view">;

  fundContract: TypedContractMethod<[], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  spinWheel: TypedContractMethod<[_betColor: BigNumberish], [void], "payable">;

  winner: TypedContractMethod<[], [string], "view">;

  winningColor: TypedContractMethod<[], [bigint], "view">;

  withdrawFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "betColor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "spinWheel"
  ): TypedContractMethod<[_betColor: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winningColor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "SpinResult"
  ): TypedContractEvent<
    SpinResultEvent.InputTuple,
    SpinResultEvent.OutputTuple,
    SpinResultEvent.OutputObject
  >;

  filters: {
    "SpinResult(address,bool,uint256,uint256)": TypedContractEvent<
      SpinResultEvent.InputTuple,
      SpinResultEvent.OutputTuple,
      SpinResultEvent.OutputObject
    >;
    SpinResult: TypedContractEvent<
      SpinResultEvent.InputTuple,
      SpinResultEvent.OutputTuple,
      SpinResultEvent.OutputObject
    >;
  };
}
