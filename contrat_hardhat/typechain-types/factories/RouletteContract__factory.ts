/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  RouletteContract,
  RouletteContractInterface,
} from "../RouletteContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "won",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "payout",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "contractBalance",
        type: "uint256",
      },
    ],
    name: "SpinResult",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "betColor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundContract",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betColor",
        type: "uint256",
      },
    ],
    name: "spinWheel",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningColor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060055534801561001557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a96806100656000396000f3fe60806040526004361061007b5760003560e01c8063b6e066801161004e578063b6e066801461011b578063bd097e2114610146578063d24257c014610150578063dfbf53ae1461017b5761007b565b8063155dd5ee146100805780634949787b146100a95780638da5cb5b146100d4578063a2d7c106146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061058f565b6101a6565b005b3480156100b557600080fd5b506100be6102e1565b6040516100cb91906105cb565b60405180910390f35b3480156100e057600080fd5b506100e96102e7565b6040516100f69190610627565b60405180910390f35b6101196004803603810190610114919061058f565b61030b565b005b34801561012757600080fd5b50610130610482565b60405161013d91906105cb565b60405180910390f35b61014e610488565b005b34801561015c57600080fd5b506101656104cd565b60405161017291906105cb565b60405180910390f35b34801561018757600080fd5b506101906104d3565b60405161019d9190610627565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b906106c5565b60405180910390fd5b80471015610277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026e90610731565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102dd573d6000803e3d6000fd5b5050565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000341161034e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103459061079d565b60405180910390fd5b3460018190555061035d6104f9565b6003819055508060028190555060025460035403610428576000600260015461038691906107ec565b90503373ffffffffffffffffffffffffffffffffffffffff167fe05390c2a5f32aeaf4e0e6ddc4e4759a80e4d32f95cc008b32c7ac846dde2dd2600183476040516103d393929190610849565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610421573d6000803e3d6000fd5b505061047f565b60003373ffffffffffffffffffffffffffffffffffffffff167fe05390c2a5f32aeaf4e0e6ddc4e4759a80e4d32f95cc008b32c7ac846dde2dd26000834760405161047593929190610849565b60405180910390a2505b50565b60025481565b600034116104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c2906108f2565b60405180910390fd5b565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600081548092919061050e90610912565b91905055506002423360055460405160200161052c939291906109c3565b6040516020818303038152906040528051906020012060001c61054f9190610a2f565b905090565b600080fd5b6000819050919050565b61056c81610559565b811461057757600080fd5b50565b60008135905061058981610563565b92915050565b6000602082840312156105a5576105a4610554565b5b60006105b38482850161057a565b91505092915050565b6105c581610559565b82525050565b60006020820190506105e060008301846105bc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610611826105e6565b9050919050565b61062181610606565b82525050565b600060208201905061063c6000830184610618565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e6460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006106af602183610642565b91506106ba82610653565b604082019050919050565b600060208201905081810360008301526106de816106a2565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b600061071b601283610642565b9150610726826106e5565b602082019050919050565b6000602082019050818103600083015261074a8161070e565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000610787601d83610642565b915061079282610751565b602082019050919050565b600060208201905081810360008301526107b68161077a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107f782610559565b915061080283610559565b925082820261081081610559565b91508282048414831517610827576108266107bd565b5b5092915050565b60008115159050919050565b6108438161082e565b82525050565b600060608201905061085e600083018661083a565b61086b60208301856105bc565b61087860408301846105bc565b949350505050565b7f4d7573742073656e642045544820746f2066756e642074686520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006108dc602283610642565b91506108e782610880565b604082019050919050565b6000602082019050818103600083015261090b816108cf565b9050919050565b600061091d82610559565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361094f5761094e6107bd565b5b600182019050919050565b6000819050919050565b61097561097082610559565b61095a565b82525050565b60008160601b9050919050565b60006109938261097b565b9050919050565b60006109a582610988565b9050919050565b6109bd6109b882610606565b61099a565b82525050565b60006109cf8286610964565b6020820191506109df82856109ac565b6014820191506109ef8284610964565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a3a82610559565b9150610a4583610559565b925082610a5557610a54610a00565b5b82820690509291505056fea264697066735822122020cadb60b561726bd1c7f22e10cf75c09bc80479f208d00309eb5c8a7ef2125c64736f6c63430008180033";

type RouletteContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouletteContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouletteContract__factory extends ContractFactory {
  constructor(...args: RouletteContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RouletteContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RouletteContract__factory {
    return super.connect(runner) as RouletteContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouletteContractInterface {
    return new Interface(_abi) as RouletteContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RouletteContract {
    return new Contract(address, _abi, runner) as unknown as RouletteContract;
  }
}
