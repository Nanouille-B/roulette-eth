/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  RouletteContract,
  RouletteContractInterface,
} from "../RouletteContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "won",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "payout",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "winningColor",
        type: "uint256",
      },
    ],
    name: "SpinResult",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "betColor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundContract",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betColor",
        type: "uint256",
      },
    ],
    name: "spinWheel",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningColor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060055534801561001557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a6a806100656000396000f3fe60806040526004361061007b5760003560e01c8063b6e066801161004e578063b6e066801461011b578063bd097e2114610146578063d24257c014610150578063dfbf53ae1461017b5761007b565b8063155dd5ee146100805780634949787b146100a95780638da5cb5b146100d4578063a2d7c106146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610599565b6101a6565b005b3480156100b557600080fd5b506100be6102e1565b6040516100cb91906105d5565b60405180910390f35b3480156100e057600080fd5b506100e96102e7565b6040516100f69190610631565b60405180910390f35b61011960048036038101906101149190610599565b61030b565b005b34801561012757600080fd5b50610130610492565b60405161013d91906105d5565b60405180910390f35b61014e610498565b005b34801561015c57600080fd5b506101656104dd565b60405161017291906105d5565b60405180910390f35b34801561018757600080fd5b506101906104e3565b60405161019d9190610631565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b906106cf565b60405180910390fd5b80471015610277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026e9061073b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102dd573d6000803e3d6000fd5b5050565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000341161034e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610345906107a7565b60405180910390fd5b3460018190555061035d610509565b600381905550806002819055506002546003540361042a576000600260015461038691906107f6565b90503373ffffffffffffffffffffffffffffffffffffffff167fe05390c2a5f32aeaf4e0e6ddc4e4759a80e4d32f95cc008b32c7ac846dde2dd26001836002546040516103d593929190610853565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610423573d6000803e3d6000fd5b505061048f565b60003373ffffffffffffffffffffffffffffffffffffffff167fe05390c2a5f32aeaf4e0e6ddc4e4759a80e4d32f95cc008b32c7ac846dde2dd26000836002546001610476919061088a565b60405161048593929190610853565b60405180910390a2505b50565b60025481565b600034116104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610930565b60405180910390fd5b565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600081548092919061051e90610950565b919050555060024260405160200161053691906109b9565b6040516020818303038152906040528051906020012060001c6105599190610a03565b905090565b600080fd5b6000819050919050565b61057681610563565b811461058157600080fd5b50565b6000813590506105938161056d565b92915050565b6000602082840312156105af576105ae61055e565b5b60006105bd84828501610584565b91505092915050565b6105cf81610563565b82525050565b60006020820190506105ea60008301846105c6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061061b826105f0565b9050919050565b61062b81610610565b82525050565b60006020820190506106466000830184610622565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e6460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006106b960218361064c565b91506106c48261065d565b604082019050919050565b600060208201905081810360008301526106e8816106ac565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b600061072560128361064c565b9150610730826106ef565b602082019050919050565b6000602082019050818103600083015261075481610718565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000610791601d8361064c565b915061079c8261075b565b602082019050919050565b600060208201905081810360008301526107c081610784565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061080182610563565b915061080c83610563565b925082820261081a81610563565b91508282048414831517610831576108306107c7565b5b5092915050565b60008115159050919050565b61084d81610838565b82525050565b60006060820190506108686000830186610844565b61087560208301856105c6565b61088260408301846105c6565b949350505050565b600061089582610563565b91506108a083610563565b92508282039050818111156108b8576108b76107c7565b5b92915050565b7f4d7573742073656e642045544820746f2066756e642074686520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b600061091a60228361064c565b9150610925826108be565b604082019050919050565b600060208201905081810360008301526109498161090d565b9050919050565b600061095b82610563565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361098d5761098c6107c7565b5b600182019050919050565b6000819050919050565b6109b36109ae82610563565b610998565b82525050565b60006109c582846109a2565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a0e82610563565b9150610a1983610563565b925082610a2957610a286109d4565b5b82820690509291505056fea2646970667358221220cc665821440d0cb59ccee0f7c0f0c559ab9a2fa4caf2b2caa85c4a058a2f428464736f6c63430008180033";

type RouletteContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouletteContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouletteContract__factory extends ContractFactory {
  constructor(...args: RouletteContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RouletteContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RouletteContract__factory {
    return super.connect(runner) as RouletteContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouletteContractInterface {
    return new Interface(_abi) as RouletteContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RouletteContract {
    return new Contract(address, _abi, runner) as unknown as RouletteContract;
  }
}
